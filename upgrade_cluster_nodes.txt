Creation of EKS cluster::
================================
Step1: Take EC2 Instance with t2.xlarge instance type (took amazon2 linux with t2.medium)

Step2: Create IAM Role with Admin policy for eks-cluster and attach to ec2-instance

Step3: Install Kubectl--
curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl
chmod +x ./kubectl
mkdir -p $HOME/bin
cp ./kubectl $HOME/bin/kubectl
export PATH=$HOME/bin:$PATH
echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
source $HOME/.bashrc
kubectl version --short --client

Step4: Install eksctl--
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/bin
eksctl version

Step5: Create EKS cluster without Nodegroup-
eksctl create cluster --name=eksdemo1 \
--region=us-east-2 \
--zones=us-east-2a,us-east-2b \
--without-nodegroup

Step6: Add Iam-Oidc-Providers:
eksctl utils associate-iam-oidc-provider \
--region us-east-2 \
--cluster eksdemo1 \
--approve

Step7: Create Nodegroup:
eksctl create nodegroup --cluster=eksdemo1 \
--region=us-east-2 \
--name=eksdemo1-ng-public \
--node-type=t2.medium \
--nodes=2 \
--nodes-min=2 \
--nodes-max=4 \
--node-volume-size=10 \
--ssh-access \
--ssh-public-key=rosh_key \
--managed \
--asg-access \
--external-dns-access \
--full-ecr-access \
--appmesh-access \
--alb-ingress-access


Listing nodegroups --> To list the details about a nodegroup or all of the nodegroups, use:
[root@eks ~]# eksctl get nodegroup --cluster=eksdemo1 --region=us-east-2
CLUSTER         NODEGROUP               STATUS  CREATED                 MIN SIZE        MAX SIZE        DESIRED CAPACITY    INSTANCE TYPE   IMAGE ID        ASG NAME
eksdemo1        eksdemo1-ng-public      ACTIVE  2021-07-05T13:50:41Z    2               4               2          t2.medium        AL2_x86_64      eks-08bd3b77-b493-da6d-1657-ccc417abcc3f


Step8: Deleting NodeGroup:
eksctl delete nodegroup --cluster=eksdemo1 \
--region=us-east-2 \
--name=eksdemo1-ng-public

Step9: Deleting EKS Cluster:
eksctl delete cluster --name=eksdemo1 \
--region=us-east-2

#######################################################################################################################

Upgrading/Downgrading NodeGroup:
------------------------------------

A)  Creating a new Nodegroup with more nodes and size for the same cluster---

eksctl create nodegroup --cluster=eksdemo1 \
--region=us-east-2 \
--name=node-group-2 \
--node-type=t2.medium \
--nodes=3 \
--nodes-min=3 \
--nodes-max=4 \
--node-volume-size=10 \
--ssh-access \
--ssh-public-key=rosh_key \
--managed \
--asg-access \
--external-dns-access \
--full-ecr-access \
--appmesh-access \
--alb-ingress-access

. To list the nodegroup and nodes of the EKS cluster- eksdemo1 ---

[root@eks ~]# eksctl get nodegroup --cluster=eksdemo1 --region=us-east-2
CLUSTER         NODEGROUP               STATUS  CREATED                 MIN SIZE        MAX SIZE        DESIRED CAPACITY        INSTANCE TYPE       IMAGE ID        ASG NAME
eksdemo1        eksdemo1-ng-public      ACTIVE  2021-07-05T13:50:41Z    2               4               2                       t2.medium   AL2_x86_64      eks-08bd3b77-b493-da6d-1657-ccc417abcc3f
eksdemo1        node-group-2            ACTIVE  2021-07-05T14:07:35Z    3               4               3                       t2.medium   AL2_x86_64      eks-5abd3b7f-703e-1b51-cd88-7127a973342f

To list content of each nodegroup---

[root@eks ~]# eksctl get nodegroup --cluster=eksdemo1 --region=us-east-2 --name=node-group-2
CLUSTER         NODEGROUP       STATUS  CREATED                 MIN SIZE        MAX SIZE        DESIRED CAPACITY        INSTANCE TYPE       IMAGE ID        ASG NAME
eksdemo1        node-group-2    ACTIVE  2021-07-05T14:07:35Z    3               4               3                       t2.medium  AL2_x86_64       eks-5abd3b7f-703e-1b51-cd88-7127a973342f

--------------------------------------------------------------------------

I have made 3 deployments and all are deployed in the 1st node group - eksdemo1-ng-public only ( usually it gets deployed in nodes of both the nodegroup)

[root@eks ~]# kubectl create deployment nginx-deploy --image=nginx
deployment.apps/nginx-deploy created
[root@eks ~]# kubectl create deployment nginx-d --image=nginx
deployment.apps/nginx-d created
[root@eks ~]# kubectl create deployment nginx-2 --image=nginx
deployment.apps/nginx-2 created
[root@eks ~]# kubectl create deployment nginx-3 --image=nginx
deployment.apps/nginx-3 created

To list all the nodes ----

[root@eks ~]# kubectl get nodes -o wide
NAME                                           STATUS   ROLES    AGE   VERSION              INTERNAL-IP      EXTERNAL-IP      OS-IMAGE         KERNEL-VERSION                CONTAINER-RUNTIME
ip-192-168-2-155.us-east-2.compute.internal    Ready    <none>   13m   v1.19.6-eks-49a6c0   192.168.2.155    18.118.121.140   Amazon Linux 2   5.4.117-58.216.amzn2.x86_64   docker://19.3.13
ip-192-168-24-203.us-east-2.compute.internal   Ready    <none>   13m   v1.19.6-eks-49a6c0   192.168.24.203   3.17.183.13      Amazon Linux 2   5.4.117-58.216.amzn2.x86_64   docker://19.3.13
ip-192-168-40-215.us-east-2.compute.internal   Ready    <none>   12m   v1.19.6-eks-49a6c0   192.168.40.215   3.143.233.215    Amazon Linux 2   5.4.117-58.216.amzn2.x86_64   docker://19.3.13
ip-192-168-62-161.us-east-2.compute.internal   Ready    <none>   30m   v1.19.6-eks-49a6c0   192.168.62.161   3.16.180.227     Amazon Linux 2   5.4.117-58.216.amzn2.x86_64   docker://19.3.13
ip-192-168-8-9.us-east-2.compute.internal      Ready    <none>   30m   v1.19.6-eks-49a6c0   192.168.8.9      18.118.119.65    Amazon Linux 2   5.4.117-58.216.amzn2.x86_64   docker://19.3.13




